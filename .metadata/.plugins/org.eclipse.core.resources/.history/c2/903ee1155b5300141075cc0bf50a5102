/*
 * @author	Elijah Freestone 
 *
 * Project	Project3Android
 * 
 * @class 	CPM term 1410
 * 
 * Package	com.elijahfreestone.project3android
 * 
 * Date		Oct 11, 2014
 */

package com.elijahfreestone.project3android;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import android.app.Activity;
import android.app.AlertDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.DialogInterface.OnClickListener;
import android.content.Intent;
import android.graphics.Color;
import android.os.Bundle;
import android.util.Log;
import android.view.ActionMode;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.Window;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemLongClickListener;
import android.widget.BaseAdapter;
import android.widget.Button;
import android.widget.ListView;
import android.widget.TextView;
import android.widget.Toast;

import com.parse.FindCallback;
import com.parse.Parse;
import com.parse.ParseACL;
import com.parse.ParseException;
import com.parse.ParseObject;
import com.parse.ParseQuery;
import com.parse.ParseUser;

/**
 * The Class MainActivity.
 */
public class MainActivity extends Activity {
	String TAG = "MainActivity";
	static Context myContext;
	Button logOutButton; 
	static TextView noItemsNotice;
	static ListView itemListView;
	static ArrayList<HashMap<String, String>> parseArrayList;
	static BaseAdapter listAdapter;
	static ActionMode myActionMode;
	int selectedObject = -1;
	View viewSelected;
	
	String editNameString = "test";

    /* (non-Javadoc)
     * @see android.app.Activity#onCreate(android.os.Bundle)
     */
    @Override           
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        
        myContext = this;
        //Request progress wheel
        requestWindowFeature(Window.FEATURE_INDETERMINATE_PROGRESS);
        
        setContentView(R.layout.activity_main);  
        
        //Create no item title
        noItemsNotice = (TextView) findViewById(R.id.noItemsNotice);
        //Grab listview and create header
        itemListView = (ListView) findViewById(R.id.itemListView);
        View listHeader = getLayoutInflater().inflate(R.layout.listview_header, null);
        itemListView.addHeaderView(listHeader);
        
        itemListView.setChoiceMode(ListView.CHOICE_MODE_SINGLE);
        
        parseArrayList = new ArrayList<HashMap<String, String>>();
        
        //Initialize Parse with credentials 
        Parse.initialize(this, "SAUIZr14D78N6VQVjYfu6KJmNzALl1YE4BCvcq8S", "TCdRBe56XyyV2ra4BBOzfafYsy8dWImtCGlZTWu4");
        //Set default Access Control List to read/write of current user when creating object
        ParseACL.setDefaultACL(new ParseACL(), true);   
        
		//Check Parse for current user and auto login if one exists.
		ParseUser currentUser = ParseUser.getCurrentUser(); 
		if (currentUser != null) { 
			Toast.makeText(getApplicationContext(), "Welcome, " + currentUser.getUsername(),
                    Toast.LENGTH_LONG).show(); 
			Log.i(TAG, "User auto-logged in"); 
		} else {
			// Send user to LoginSignupActivity.class
			Intent loginIntent = new Intent(MainActivity.this, LoginAndSignupActivity.class);
			startActivity(loginIntent);
			//Remove main activity until user is authenticated
			finish();  
		} //currentUser if/else close 
		
		//Query Parse to get items list for user and display
		DataManager.queryParseForItems();
		
		//Set long click listener for listview
		itemListView.setOnItemLongClickListener(new OnItemLongClickListener() {

			@Override
		      public boolean onItemLongClick(AdapterView<?> parent, View view,
		          int position, long id) {
				//Pass view and position to be used elsewhere
				viewSelected = view;
				selectedObject = position;
				//Return if action mode is null for whatever reason
				if (myActionMode != null) {
					Log.i(TAG, "Action mode null!");
		            return false;
		        }
				myActionMode = MainActivity.this.startActionMode(new ActionBarCallBack());
				viewSelected.setSelected(true);
				//Manually set selected color for list item. Is cleared in CAB destroy
				viewSelected.setBackgroundColor(myContext.getResources().getColor(android.R.color.holo_blue_light));
				
		        return true;
		      } 
		}); //setOnItemLongClickListener close
		
    } //onCreate close 
    
//    //Delete item from list once confirmed with alert dialog 
//    void deleteItem(int positionSelected) {
//    	//Pass position to Final var -1 to account for 0 based
//    	final int deleteItemPosition = positionSelected - 1;
//    	//Create dialog to confirm delete
//    	AlertDialog.Builder deleteDialog = new AlertDialog.Builder(MainActivity.this);
//    	deleteDialog.setTitle("Delete Item?");
//    	deleteDialog.setMessage("Are you sure you want to delete this item?");
//    	deleteDialog.setPositiveButton("YES", new OnClickListener() {
//			
//			@Override
//			public void onClick(DialogInterface dialog, int which) {
//				//Query parse for item
//				ParseQuery<ParseObject> deleteQuery = ParseQuery.getQuery("newItem");
//				//Remove item from listview
//				deleteQuery.findInBackground(new FindCallback<ParseObject>() {
//
//					@Override
//					public void done(List<ParseObject> itemsList, ParseException e) {
//						if (e == null) {
//							//Delete item from parse
//							itemsList.get(deleteItemPosition).deleteInBackground(new DeleteCallback() {
//
//								@Override
//								public void done(ParseException arg0) {
//									if (arg0 == null) {
//										Toast.makeText(getBaseContext(),"Item Successfully Deleted!", Toast.LENGTH_LONG).show();
//										//Clear item arraylist and repop listview
//										parseArrayList.clear();
//										queryParseForItems();
//										listAdapter.notifyDataSetChanged();
//										//itemListView.setEnabled(true);
//									} else {
//										Toast.makeText(getBaseContext(),"An error occured, please try again.", Toast.LENGTH_LONG).show();
//									}
//								}
//							}); //deleteInBackground close
//						}
//					}
//				}); //findInBackground close
//			}
//		});
//    	deleteDialog.setNegativeButton("NO", new OnClickListener() {
//			
//			@Override
//			public void onClick(DialogInterface dialog, int which) {
//				Log.i(TAG, "Delete Canceled");
//			}
//		});  
//    	deleteDialog.setNeutralButton("EDIT", new OnClickListener() {
//			
//			@Override
//			public void onClick(DialogInterface dialog, int which) {
//				Log.i(TAG, "Edit clicked");
//				editItem(deleteItemPosition);
//			}
//		});
//    	
//    	deleteDialog.show();
//    } //deleteItem close
    
    void editItem(int editPositionSelected) {
    	//Pass position to Final var -1 to account for 0 based
    	final int editItemPosition = editPositionSelected;
    	
    	//
    	final AlertDialog.Builder editDialog = new AlertDialog.Builder(MainActivity.this);
    	editDialog.setTitle("Edit");
    	ParseQuery<ParseObject> editQuery = ParseQuery.getQuery("newItem");
    	editQuery.findInBackground(new FindCallback<ParseObject>() {
			
			@Override
			public void done(List<ParseObject> itemsList, ParseException e) {
				// TODO Auto-generated method stub
//				itemsList.get(editItemPosition);
				editNameString = itemsList.get(editItemPosition).getString("Name");
				
				editDialog.setMessage("Edit " + editNameString);
		    	
		    	editDialog.setPositiveButton("OK", new OnClickListener() {
					
					@Override
					public void onClick(DialogInterface dialog, int which) {
						// TODO Auto-generated method stub
						
					}
				});
		    	editDialog.show();
			}
		});
    } 
    
//	/**
//	 * Query parse for items and display.
//	 */
//	void queryParseForItems() {
//		//Show progress wheel
//		setProgressBarIndeterminateVisibility(true);
//		
//		// Query Parse for items and parse into arraylist
//		ParseQuery<ParseObject> query = ParseQuery.getQuery("newItem");
//		query.findInBackground(new FindCallback<ParseObject>() {
//			public void done(List<ParseObject> newItemList, ParseException e) {
//				if (e == null) {
//					Log.i(TAG, "Retrieved " + newItemList.size() + " items");
//					//Log.i(TAG, newItemList.toString());
//					//Split list into seperate Parse Objects
//					for (ParseObject eachItem : newItemList) { 
//						
//						String itemName = eachItem.getString("Name"); 
//						long itemNumber = eachItem.getLong("Number");
//						String itemNumberString = "" + itemNumber;
//						String itemID = eachItem.getObjectId().toString();
//						HashMap<String, String> objectMap = new HashMap<String, String>();
//						objectMap.put("itemName", itemName);
//						objectMap.put("itemNumber", itemNumberString);
//						objectMap.put("itemID", itemID); 
//					
//						parseArrayList.add(objectMap);    
//						//Log.i(TAG, "Name: " + itemName + ", Number: " + itemNumber + " ID: " + itemID);
//					} 
//					//Log.i(TAG, parseArrayList.toString());
//					listAdapter = new SimpleAdapter(
//							MainActivity.this, parseArrayList,
//							R.layout.listview_row, new String[] { "itemName",
//									"itemNumber" }, new int[] { R.id.nameTextView,
//									R.id.numberTextView });
//					itemListView.setAdapter(listAdapter);
//				} else { 
//					Log.e(TAG, "Error: " + e.getMessage().toString()); 
//				}
//				
//				//Add no contacts notice if there aren't any contacts for the user
//				TextView noItemsNotice = (TextView) findViewById(R.id.noItemsNotice);
//				if (parseArrayList.size() == 0) {
//					noItemsNotice.setText("No contacts have been added. Please select the plus button to add a contact.");
//				} else {
//					noItemsNotice.setText("");
//				}
//				
//				//Hide progress wheel
//				setProgressBarIndeterminateVisibility(false);
//			}
//		});
//	} //queryParseForItems close

    /* (non-Javadoc)
     * @see android.app.Activity#onCreateOptionsMenu(android.view.Menu)
     */
    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        // Inflate the menu; this adds items to the action bar if it is present.
        getMenuInflater().inflate(R.menu.main, menu);
        return true; 
    }

    /* (non-Javadoc)
     * @see android.app.Activity#onOptionsItemSelected(android.view.MenuItem)
     */
    @Override
    public boolean onOptionsItemSelected(MenuItem menuItem) {
        // Handle action bar item clicks here. The action bar will
        // automatically handle clicks on the Home/Up button, so long
        // as you specify a parent activity in AndroidManifest.xml.
        switch (menuItem.getItemId()) {       	
        //Plus button clicked
        case R.id.newPlusButton:
        	Log.i(TAG, "Plus clicked");
        	Intent newItemIntent = new Intent(MainActivity.this, NewItemActivity.class);
        	startActivityForResult(newItemIntent, 0);
        	break;
        //Log out button
        case R.id.logoutButton: 
        	//Log user out and present login screen
			ParseUser.logOut();
			Log.i(TAG, "User logged out");
			Intent logoutIntent = new Intent(MainActivity.this, LoginAndSignupActivity.class);
			startActivity(logoutIntent);
			Toast.makeText(getApplicationContext(), "You have been successfully logged out.",
                    Toast.LENGTH_LONG).show();
			//Remove Main activity from stack to stop "Back button login"
			finish(); 
			break;
		//Refresh button
		case R.id.refreshButton:
			Log.i(TAG, "Refresh hit");
			//Clear arraylist and query Parse again
			parseArrayList.clear();
			DataManager.queryParseForItems();
			break;
        default:  
			break;
		}
        return super.onOptionsItemSelected(menuItem);
    } //onOptionsItemSelected close
    
    /* (non-Javadoc)
     * @see android.app.Activity#onActivityResult(int, int, android.content.Intent)
     */
    @Override 
    protected void onActivityResult(int requestCode, int resultCode, Intent newItemBackIntent) {
    	Log.i(TAG, "On Activity Result");
    	if (resultCode == RESULT_OK && requestCode == 0) {
    		Log.i(TAG, "Result Code OK");
    		parseArrayList.clear();
    		//listAdapter.notifyDataSetInvalidated();
			DataManager.queryParseForItems();
			DataManager.listAdapter.notifyDataSetChanged();
		}
    	//super.onActivityResult(requestCode, resultCode, newItemBackIntent);
    } //onActivityResult close
    
    class ActionBarCallBack implements ActionMode.Callback {
    	  
        @Override
        public boolean onActionItemClicked(ActionMode mode, MenuItem item) {
            switch (item.getItemId()) {
			case R.id.editItem:
				Log.i(TAG, "Edit: " + parseArrayList.get(selectedObject));
				
				break;
			case R.id.deleteItem:
				Log.i(TAG, "Delete clicked");
				DataManager.deleteItem(selectedObject);
				break;
			default:
				break;
			}
            return false;
        }
  
        @Override
        public boolean onCreateActionMode(ActionMode mode, Menu menu) {
            // TODO Auto-generated method stub
            mode.getMenuInflater().inflate(R.menu.contextual_action_bar, menu);
            return true;
        }
   
        @Override
        public void onDestroyActionMode(ActionMode mode) {
            // TODO Auto-generated method stub
        	myActionMode = null;
        	selectedObject = -1;
        	viewSelected.setBackgroundColor(Color.TRANSPARENT);
        	//Log.i(TAG, "selectedObject = " + selectedObject);
        }
  
        @Override
        public boolean onPrepareActionMode(ActionMode mode, Menu menu) {
            // TODO Auto-generated method stub
  
            mode.setTitle("Edit/Delete");
            return false;
        }
    }
    
}
